statements:
  - statement:
      class: Stmt.Class
      name: TreeNode
      superClass: object
      members:
        - member:
            class: Stmt.Var
            name: value
            type: int
            initializer:
              class: Expr.Literal
              inferredType: int
              value: 0
        - member:
            class: Stmt.Var
            name: left
            type: TreeNode
            initializer:
              class: Expr.Literal
              inferredType: <None>
              value: None
        - member:
            class: Stmt.Var
            name: right
            type: TreeNode
            initializer:
              class: Expr.Literal
              inferredType: <None>
              value: None
        - member:
            class: Stmt.Function
            name: insert
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: TreeNode
                  initializer: None
              - param:
                  class: Stmt.Var
                  name: x
                  type: int
                  initializer: None
            returnType: bool
            body:
              - statement:
                  class: Stmt.If
                  condition:
                    class: Expr.Binary
                    inferredType: bool
                    left:
                      class: Expr.Variable
                      inferredType: int
                      name: x
                    operator: "<"
                    right:
                      class: Expr.Get
                      inferredType: int
                      object:
                        name: self
                        inferredType: TreeNode
                      name: value
                  thenBranch:
                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Binary
                          inferredType: bool
                          left:
                            class: Expr.Get
                            inferredType: TreeNode
                            object:
                              name: self
                              inferredType: TreeNode
                            name: left
                          operator: "is"
                          right:
                            class: Expr.Literal
                            inferredType: <None>
                            value: None
                        thenBranch:
                          - statement:
                              class: Stmt.Expression
                              expr:
                                class: Expr.MultiAssign
                                targets:
                                  - target:
                                      class: Expr.Set
                                      object:
                                        name: self
                                        inferredType: TreeNode
                                      name: left
                                value:
                                  class: Expr.Call
                                  inferredType: TreeNode
                                  callee:
                                    class: Expr.Variable
                                    inferredType: [int] -> TreeNode
                                    name: makeNode
                                  arguments:
                                    - argument:
                                        class: Expr.Variable
                                        inferredType: int
                                        name: x
                          - statement:
                              class: Stmt.Return
                              value:
                                class: Expr.Literal
                                inferredType: bool
                                value: true
                        elseBranch:
                          - statement:
                              class: Stmt.Return
                              value:
                                class: Expr.Call
                                inferredType: bool
                                callee:
                                  class: Expr.Get
                                  inferredType: [TreeNode, int] -> bool
                                  object:
                                    class: Expr.Get
                                    inferredType: TreeNode
                                    object:
                                      name: self
                                      inferredType: TreeNode
                                    name: left
                                  name: insert
                                arguments:
                                  - argument:
                                      class: Expr.Variable
                                      inferredType: int
                                      name: x
                  elseBranch:
                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Binary
                          inferredType: bool
                          left:
                            class: Expr.Variable
                            inferredType: int
                            name: x
                          operator: ">"
                          right:
                            class: Expr.Get
                            inferredType: int
                            object:
                              name: self
                              inferredType: TreeNode
                            name: value
                        thenBranch:
                          - statement:
                              class: Stmt.If
                              condition:
                                class: Expr.Binary
                                inferredType: bool
                                left:
                                  class: Expr.Get
                                  inferredType: TreeNode
                                  object:
                                    name: self
                                    inferredType: TreeNode
                                  name: right
                                operator: "is"
                                right:
                                  class: Expr.Literal
                                  inferredType: <None>
                                  value: None
                              thenBranch:
                                - statement:
                                    class: Stmt.Expression
                                    expr:
                                      class: Expr.MultiAssign
                                      targets:
                                        - target:
                                            class: Expr.Set
                                            object:
                                              name: self
                                              inferredType: TreeNode
                                            name: right
                                      value:
                                        class: Expr.Call
                                        inferredType: TreeNode
                                        callee:
                                          class: Expr.Variable
                                          inferredType: [int] -> TreeNode
                                          name: makeNode
                                        arguments:
                                          - argument:
                                              class: Expr.Variable
                                              inferredType: int
                                              name: x
                                - statement:
                                    class: Stmt.Return
                                    value:
                                      class: Expr.Literal
                                      inferredType: bool
                                      value: true
                              elseBranch:
                                - statement:
                                    class: Stmt.Return
                                    value:
                                      class: Expr.Call
                                      inferredType: bool
                                      callee:
                                        class: Expr.Get
                                        inferredType: [TreeNode, int] -> bool
                                        object:
                                          class: Expr.Get
                                          inferredType: TreeNode
                                          object:
                                            name: self
                                            inferredType: TreeNode
                                          name: right
                                        name: insert
                                      arguments:
                                        - argument:
                                            class: Expr.Variable
                                            inferredType: int
                                            name: x
                        elseBranch: []
              - statement:
                  class: Stmt.Return
                  value:
                    class: Expr.Literal
                    inferredType: bool
                    value: false
        - member:
            class: Stmt.Function
            name: contains
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: TreeNode
                  initializer: None
              - param:
                  class: Stmt.Var
                  name: x
                  type: int
                  initializer: None
            returnType: bool
            body:
              - statement:
                  class: Stmt.If
                  condition:
                    class: Expr.Binary
                    inferredType: bool
                    left:
                      class: Expr.Variable
                      inferredType: int
                      name: x
                    operator: "<"
                    right:
                      class: Expr.Get
                      inferredType: int
                      object:
                        name: self
                        inferredType: TreeNode
                      name: value
                  thenBranch:
                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Binary
                          inferredType: bool
                          left:
                            class: Expr.Get
                            inferredType: TreeNode
                            object:
                              name: self
                              inferredType: TreeNode
                            name: left
                          operator: "is"
                          right:
                            class: Expr.Literal
                            inferredType: <None>
                            value: None
                        thenBranch:
                          - statement:
                              class: Stmt.Return
                              value:
                                class: Expr.Literal
                                inferredType: bool
                                value: false
                        elseBranch:
                          - statement:
                              class: Stmt.Return
                              value:
                                class: Expr.Call
                                inferredType: bool
                                callee:
                                  class: Expr.Get
                                  inferredType: [TreeNode, int] -> bool
                                  object:
                                    class: Expr.Get
                                    inferredType: TreeNode
                                    object:
                                      name: self
                                      inferredType: TreeNode
                                    name: left
                                  name: contains
                                arguments:
                                  - argument:
                                      class: Expr.Variable
                                      inferredType: int
                                      name: x
                  elseBranch:
                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Binary
                          inferredType: bool
                          left:
                            class: Expr.Variable
                            inferredType: int
                            name: x
                          operator: ">"
                          right:
                            class: Expr.Get
                            inferredType: int
                            object:
                              name: self
                              inferredType: TreeNode
                            name: value
                        thenBranch:
                          - statement:
                              class: Stmt.If
                              condition:
                                class: Expr.Binary
                                inferredType: bool
                                left:
                                  class: Expr.Get
                                  inferredType: TreeNode
                                  object:
                                    name: self
                                    inferredType: TreeNode
                                  name: right
                                operator: "is"
                                right:
                                  class: Expr.Literal
                                  inferredType: <None>
                                  value: None
                              thenBranch:
                                - statement:
                                    class: Stmt.Return
                                    value:
                                      class: Expr.Literal
                                      inferredType: bool
                                      value: false
                              elseBranch:
                                - statement:
                                    class: Stmt.Return
                                    value:
                                      class: Expr.Call
                                      inferredType: bool
                                      callee:
                                        class: Expr.Get
                                        inferredType: [TreeNode, int] -> bool
                                        object:
                                          class: Expr.Get
                                          inferredType: TreeNode
                                          object:
                                            name: self
                                            inferredType: TreeNode
                                          name: right
                                        name: contains
                                      arguments:
                                        - argument:
                                            class: Expr.Variable
                                            inferredType: int
                                            name: x
                        elseBranch:
                          - statement:
                              class: Stmt.Return
                              value:
                                class: Expr.Literal
                                inferredType: bool
                                value: true
  - statement:
      class: Stmt.Class
      name: Tree
      superClass: object
      members:
        - member:
            class: Stmt.Var
            name: root
            type: TreeNode
            initializer:
              class: Expr.Literal
              inferredType: <None>
              value: None
        - member:
            class: Stmt.Var
            name: size
            type: int
            initializer:
              class: Expr.Literal
              inferredType: int
              value: 0
        - member:
            class: Stmt.Function
            name: insert
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: Tree
                  initializer: None
              - param:
                  class: Stmt.Var
                  name: x
                  type: int
                  initializer: None
            returnType: object
            body:
              - statement:
                  class: Stmt.If
                  condition:
                    class: Expr.Binary
                    inferredType: bool
                    left:
                      class: Expr.Get
                      inferredType: TreeNode
                      object:
                        name: self
                        inferredType: Tree
                      name: root
                    operator: "is"
                    right:
                      class: Expr.Literal
                      inferredType: <None>
                      value: None
                  thenBranch:
                    - statement:
                        class: Stmt.Expression
                        expr:
                          class: Expr.MultiAssign
                          targets:
                            - target:
                                class: Expr.Set
                                object:
                                  name: self
                                  inferredType: Tree
                                name: root
                          value:
                            class: Expr.Call
                            inferredType: TreeNode
                            callee:
                              class: Expr.Variable
                              inferredType: [int] -> TreeNode
                              name: makeNode
                            arguments:
                              - argument:
                                  class: Expr.Variable
                                  inferredType: int
                                  name: x
                    - statement:
                        class: Stmt.Expression
                        expr:
                          class: Expr.MultiAssign
                          targets:
                            - target:
                                class: Expr.Set
                                object:
                                  name: self
                                  inferredType: Tree
                                name: size
                          value:
                            class: Expr.Literal
                            inferredType: int
                            value: 1
                  elseBranch:
                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Call
                          inferredType: bool
                          callee:
                            class: Expr.Get
                            inferredType: [TreeNode, int] -> bool
                            object:
                              class: Expr.Get
                              inferredType: TreeNode
                              object:
                                name: self
                                inferredType: Tree
                              name: root
                            name: insert
                          arguments:
                            - argument:
                                class: Expr.Variable
                                inferredType: int
                                name: x
                        thenBranch:
                          - statement:
                              class: Stmt.Expression
                              expr:
                                class: Expr.MultiAssign
                                targets:
                                  - target:
                                      class: Expr.Set
                                      object:
                                        name: self
                                        inferredType: Tree
                                      name: size
                                value:
                                  class: Expr.Binary
                                  inferredType: int
                                  left:
                                    class: Expr.Get
                                    inferredType: int
                                    object:
                                      name: self
                                      inferredType: Tree
                                    name: size
                                  operator: "+"
                                  right:
                                    class: Expr.Literal
                                    inferredType: int
                                    value: 1
                        elseBranch: []
        - member:
            class: Stmt.Function
            name: contains
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: Tree
                  initializer: None
              - param:
                  class: Stmt.Var
                  name: x
                  type: int
                  initializer: None
            returnType: bool
            body:
              - statement:
                  class: Stmt.If
                  condition:
                    class: Expr.Binary
                    inferredType: bool
                    left:
                      class: Expr.Get
                      inferredType: TreeNode
                      object:
                        name: self
                        inferredType: Tree
                      name: root
                    operator: "is"
                    right:
                      class: Expr.Literal
                      inferredType: <None>
                      value: None
                  thenBranch:
                    - statement:
                        class: Stmt.Return
                        value:
                          class: Expr.Literal
                          inferredType: bool
                          value: false
                  elseBranch:
                    - statement:
                        class: Stmt.Return
                        value:
                          class: Expr.Call
                          inferredType: bool
                          callee:
                            class: Expr.Get
                            inferredType: [TreeNode, int] -> bool
                            object:
                              class: Expr.Get
                              inferredType: TreeNode
                              object:
                                name: self
                                inferredType: Tree
                              name: root
                            name: contains
                          arguments:
                            - argument:
                                class: Expr.Variable
                                inferredType: int
                                name: x
  - statement:
      class: Stmt.Function
      name: makeNode
      params:
        - param:
            class: Stmt.Var
            name: x
            type: int
            initializer: None
      returnType: TreeNode
      body:
        - statement:
            class: Stmt.Var
            name: b
            type: TreeNode
            initializer:
              class: Expr.Literal
              inferredType: <None>
              value: None
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.MultiAssign
              targets:
                - target:
                    class: Expr.Variable
                    inferredType: TreeNode
                    name: b
              value:
                class: Expr.Call
                inferredType: TreeNode
                callee:
                  class: Expr.Variable
                  inferredType: [object] -> <None>
                  name: TreeNode
                arguments: []
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.MultiAssign
              targets:
                - target:
                    class: Expr.Set
                    object:
                      class: Expr.Variable
                      inferredType: TreeNode
                      name: b
                    name: value
              value:
                class: Expr.Variable
                inferredType: int
                name: x
        - statement:
            class: Stmt.Return
            value:
              class: Expr.Variable
              inferredType: TreeNode
              name: b
  - statement:
      class: Stmt.Var
      name: n
      type: int
      initializer:
        class: Expr.Literal
        inferredType: int
        value: 100
  - statement:
      class: Stmt.Var
      name: c
      type: int
      initializer:
        class: Expr.Literal
        inferredType: int
        value: 4
  - statement:
      class: Stmt.Var
      name: t
      type: Tree
      initializer:
        class: Expr.Literal
        inferredType: <None>
        value: None
  - statement:
      class: Stmt.Var
      name: i
      type: int
      initializer:
        class: Expr.Literal
        inferredType: int
        value: 0
  - statement:
      class: Stmt.Var
      name: k
      type: int
      initializer:
        class: Expr.Literal
        inferredType: int
        value: 37813
  - statement:
      class: Stmt.Expression
      expr:
        class: Expr.MultiAssign
        targets:
          - target:
              class: Expr.Variable
              inferredType: Tree
              name: t
        value:
          class: Expr.Call
          inferredType: Tree
          callee:
            class: Expr.Variable
            inferredType: [object] -> <None>
            name: Tree
          arguments: []
  - statement:
      class: Stmt.While
      condition:
        class: Expr.Binary
        inferredType: bool
        left:
          class: Expr.Variable
          inferredType: int
          name: i
        operator: "<"
        right:
          class: Expr.Variable
          inferredType: int
          name: n
      body:
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.Call
              inferredType: object
              callee:
                class: Expr.Get
                inferredType: [Tree, int] -> object
                object:
                  class: Expr.Variable
                  inferredType: Tree
                  name: t
                name: insert
              arguments:
                - argument:
                    class: Expr.Variable
                    inferredType: int
                    name: k
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.MultiAssign
              targets:
                - target:
                    class: Expr.Variable
                    inferredType: int
                    name: k
              value:
                class: Expr.Binary
                inferredType: int
                left:
                  class: Expr.Grouping
                  expr:
                    class: Expr.Binary
                    inferredType: int
                    left:
                      class: Expr.Variable
                      inferredType: int
                      name: k
                    operator: "*"
                    right:
                      class: Expr.Literal
                      inferredType: int
                      value: 37813
                operator: "%"
                right:
                  class: Expr.Literal
                  inferredType: int
                  value: 37831
        - statement:
            class: Stmt.If
            condition:
              class: Expr.Binary
              inferredType: bool
              left:
                class: Expr.Binary
                inferredType: int
                left:
                  class: Expr.Variable
                  inferredType: int
                  name: i
                operator: "%"
                right:
                  class: Expr.Variable
                  inferredType: int
                  name: c
              operator: "!="
              right:
                class: Expr.Literal
                inferredType: int
                value: 0
            thenBranch:
              - statement:
                  class: Stmt.Expression
                  expr:
                    class: Expr.Call
                    inferredType: object
                    callee:
                      class: Expr.Get
                      inferredType: [Tree, int] -> object
                      object:
                        class: Expr.Variable
                        inferredType: Tree
                        name: t
                      name: insert
                    arguments:
                      - argument:
                          class: Expr.Variable
                          inferredType: int
                          name: i
            elseBranch: []
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.MultiAssign
              targets:
                - target:
                    class: Expr.Variable
                    inferredType: int
                    name: i
              value:
                class: Expr.Binary
                inferredType: int
                left:
                  class: Expr.Variable
                  inferredType: int
                  name: i
                operator: "+"
                right:
                  class: Expr.Literal
                  inferredType: int
                  value: 1
  - statement:
      class: Stmt.Expression
      expr:
        class: Expr.Print
        expr:
          class: Expr.Get
          inferredType: int
          object:
            class: Expr.Variable
            inferredType: Tree
            name: t
          name: size
  - statement:
      class: Stmt.For
      id:
        class: Expr.Variable
        inferredType: int
        name: i
      iterable:
        class: Expr.Listing
        inferredType: [int]
        elements:
          - element:
              class: Expr.Literal
              inferredType: int
              value: 4
          - element:
              class: Expr.Literal
              inferredType: int
              value: 8
          - element:
              class: Expr.Literal
              inferredType: int
              value: 15
          - element:
              class: Expr.Literal
              inferredType: int
              value: 16
          - element:
              class: Expr.Literal
              inferredType: int
              value: 23
          - element:
              class: Expr.Literal
              inferredType: int
              value: 42
      body:
        - statement:
            class: Stmt.If
            condition:
              class: Expr.Call
              inferredType: bool
              callee:
                class: Expr.Get
                inferredType: [Tree, int] -> bool
                object:
                  class: Expr.Variable
                  inferredType: Tree
                  name: t
                name: contains
              arguments:
                - argument:
                    class: Expr.Variable
                    inferredType: int
                    name: i
            thenBranch:
              - statement:
                  class: Stmt.Expression
                  expr:
                    class: Expr.Print
                    expr:
                      class: Expr.Variable
                      inferredType: int
                      name: i
            elseBranch: []
