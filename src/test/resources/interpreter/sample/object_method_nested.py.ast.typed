statements:
  - statement:
      class: Stmt.Class
      name: A
      superClass: object
      members:
        - member:
            class: Stmt.Var
            name: a
            type: int
            initializer:
              class: Expr.Literal
              inferredType: int
              value: 42
        - member:
            class: Stmt.Function
            name: foo
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: A
                  initializer: None
              - param:
                  class: Stmt.Var
                  name: ignore
                  type: object
                  initializer: None
            returnType: int
            body:
              - statement:
                  class: Stmt.Return
                  value:
                    class: Expr.Get
                    inferredType: int
                    object:
                      name: self
                      inferredType: A
                    name: a
  - statement:
      class: Stmt.Class
      name: B
      superClass: A
      members:
        - member:
            class: Stmt.Var
            name: b
            type: bool
            initializer:
              class: Expr.Literal
              inferredType: bool
              value: true
        - member:
            class: Stmt.Function
            name: __init__
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: B
                  initializer: None
            returnType: <None>
            body:
              - statement:
                  class: Stmt.Expression
                  expr:
                    class: Expr.Print
                    expr:
                      class: Expr.Literal
                      inferredType: str
                      value: "B"
        - member:
            class: Stmt.Function
            name: bar
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: B
                  initializer: None
            returnType: int
            body:
              - statement:
                  class: Stmt.Function
                  name: qux
                  params:
                    - param:
                        class: Stmt.Var
                        name: p
                        type: bool
                        initializer: None
                  returnType: int
                  body:
                    - statement:
                        class: Stmt.Return
                        value:
                          class: Expr.Call
                          inferredType: int
                          callee:
                            class: Expr.Get
                            inferredType: [A, object] -> int
                            object:
                              name: self
                              inferredType: B
                            name: foo
                          arguments:
                            - argument:
                                class: Expr.Variable
                                inferredType: bool
                                name: p
              - statement:
                  class: Stmt.Return
                  value:
                    class: Expr.Call
                    inferredType: int
                    callee:
                      class: Expr.Variable
                      inferredType: [bool] -> int
                      name: qux
                    arguments:
                      - argument:
                          class: Expr.Literal
                          inferredType: bool
                          value: true
  - statement:
      class: Stmt.Expression
      expr:
        class: Expr.Print
        expr:
          class: Expr.Call
          inferredType: int
          callee:
            class: Expr.Get
            inferredType: [B] -> int
            object:
              class: Expr.Call
              inferredType: B
              callee:
                class: Expr.Variable
                inferredType: [B] -> <None>
                name: B
              arguments: []
            name: bar
          arguments: []
