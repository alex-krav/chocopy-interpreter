statements:
  - statement:
      class: Stmt.Function
      name: concat
      params:
        - param:
            class: Stmt.Var
            name: x
            type: [int]
            initializer: None
        - param:
            class: Stmt.Var
            name: y
            type: [int]
            initializer: None
      returnType: [int]
      body:
        - statement:
            class: Stmt.Return
            value:
              class: Expr.Binary
              inferredType: [int]
              left:
                class: Expr.Variable
                inferredType: [int]
                name: x
              operator: "+"
              right:
                class: Expr.Variable
                inferredType: [int]
                name: y
  - statement:
      class: Stmt.Var
      name: z
      type: [int]
      initializer:
        class: Expr.Literal
        inferredType: <None>
        value: None
  - statement:
      class: Stmt.Var
      name: i
      type: int
      initializer:
        class: Expr.Literal
        inferredType: int
        value: 0
  - statement:
      class: Stmt.Expression
      expr:
        class: Expr.Assign
        target:
          class: Expr.Variable
          inferredType: [int]
          name: z
        value:
          class: Expr.Call
          inferredType: [int]
          callee:
            class: Expr.Variable
            inferredType: [[int], [int]] -> [int]
            name: concat
          arguments:
            - argument:
                class: Expr.Listing
                inferredType: [int]
                elements:
                  - element:
                      class: Expr.Literal
                      inferredType: int
                      value: 1
                  - element:
                      class: Expr.Literal
                      inferredType: int
                      value: 2
                  - element:
                      class: Expr.Literal
                      inferredType: int
                      value: 3
            - argument:
                class: Expr.Listing
                inferredType: [int]
                elements:
                  - element:
                      class: Expr.Literal
                      inferredType: int
                      value: 4
                  - element:
                      class: Expr.Literal
                      inferredType: int
                      value: 5
                  - element:
                      class: Expr.Literal
                      inferredType: int
                      value: 6
  - statement:
      class: Stmt.While
      condition:
        class: Expr.Binary
        inferredType: bool
        left:
          class: Expr.Variable
          inferredType: int
          name: i
        operator: "<"
        right:
          class: Expr.Len
          expr:
            class: Expr.Variable
            inferredType: [int]
            name: z
      body:
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.Print
              expr:
                class: Expr.Index
                inferredType: int
                list:
                  class: Expr.Variable
                  inferredType: [int]
                  name: z
                index:
                  class: Expr.Variable
                  inferredType: int
                  name: i
        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.Assign
              target:
                class: Expr.Variable
                inferredType: int
                name: i
              value:
                class: Expr.Binary
                inferredType: int
                left:
                  class: Expr.Variable
                  inferredType: int
                  name: i
                operator: "+"
                right:
                  class: Expr.Literal
                  inferredType: int
                  value: 1
