statements:
  - statement:
      class: Stmt.Var
      name: x
      type: int
      initializer:
        class: Expr.Literal
        value: 1


  - statement:
      class: Stmt.Var
      name: y
      type: int
      initializer:
        class: Expr.Literal
        value: 2


  - statement:
      class: Stmt.Var
      name: z
      type: int
      initializer:
        class: Expr.Literal
        value: 3


  - statement:
      class: Stmt.Function
      name: foo
      params: []
      returnType: object
      body:
        - statement:
            class: Stmt.Global
            name: x

        - statement:
            class: Stmt.Nonlocal
            name: y

        - statement:
            class: Stmt.Global
            name: w

        - statement:
            class: Stmt.Var
            name: z
            type: bool
            initializer:
              class: Expr.Literal
              value: true


        - statement:
            class: Stmt.Function
            name: bar
            params: []
            returnType: object
            body:
              - statement:
                  class: Stmt.Global
                  name: x

              - statement:
                  class: Stmt.Nonlocal
                  name: z

              - statement:
                  class: Stmt.Nonlocal
                  name: y

              - statement:
                  class: Stmt.Global
                  name: foo

              - statement:
                  class: Stmt.Nonlocal
                  name: bar

              - statement:
                  class: Stmt.Pass


        - statement:
            class: Stmt.Expression
            expr:
              class: Expr.Call
              callee:
                class: Expr.Variable
                name: bar

              arguments: []



  - statement:
      class: Stmt.Expression
      expr:
        class: Expr.Call
        callee:
          class: Expr.Variable
          name: foo

        arguments: []


