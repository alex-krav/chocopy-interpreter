statements:
  - statement:
      class: Stmt.Var
      name: count
      type: int
      initializer:
        class: Expr.Literal
        inferredType: int
        value: 0


  - statement:
      class: Stmt.Function
      name: foo
      params:
        - param:
            class: Stmt.Var
            name: s
            type: str
            initializer: None

      returnType: int
      body:
        - statement:
            class: Stmt.Return
            value:
              class: Expr.Len
              expr:
                class: Expr.Variable
                inferredType: str
                name: s




  - statement:
      class: Stmt.Class
      name: bar
      superClass: object
      members:
        - member:
            class: Stmt.Var
            name: p
            type: bool
            initializer:
              class: Expr.Literal
              inferredType: bool
              value: true


        - member:
            class: Stmt.Function
            name: baz
            params:
              - param:
                  class: Stmt.Var
                  name: self
                  type: bar
                  initializer: None

              - param:
                  class: Stmt.Var
                  name: xx
                  type: [int]
                  initializer: None

            returnType: str
            body:
              - statement:
                  class: Stmt.Global
                  name: count

              - statement:
                  class: Stmt.Var
                  name: x
                  type: int
                  initializer:
                    class: Expr.Literal
                    inferredType: int
                    value: 0


              - statement:
                  class: Stmt.Var
                  name: y
                  type: int
                  initializer:
                    class: Expr.Literal
                    inferredType: int
                    value: 1


              - statement:
                  class: Stmt.Function
                  name: qux
                  params:
                    - param:
                        class: Stmt.Var
                        name: y
                        type: int
                        initializer: None

                  returnType: object
                  body:
                    - statement:
                        class: Stmt.Nonlocal
                        name: x

                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Binary
                          inferredType: bool
                          left:
                            class: Expr.Variable
                            inferredType: int
                            name: x

                          operator: ">"
                          right:
                            class: Expr.Variable
                            inferredType: int
                            name: y


                        thenBranch:
                          - statement:
                              class: Stmt.Expression
                              expr:
                                class: Expr.Assign
                                target:
                                  class: Expr.Variable
                                  inferredType: int
                                  name: x

                                value:
                                  class: Expr.Unary
                                  inferredType: int
                                  operator: "-"
                                  operand:
                                    class: Expr.Literal
                                    inferredType: int
                                    value: 1





                        elseBranch: []


              - statement:
                  class: Stmt.For
                  identifier:
                    class: Expr.Variable
                    inferredType: int
                    name: x

                  iterable:
                    class: Expr.Variable
                    inferredType: [int]
                    name: xx

                  body:
                    - statement:
                        class: Stmt.Expression
                        expr:
                          class: Expr.Set
                          object:
                            name: self
                            inferredType: bar

                          name: p
                          value:
                            class: Expr.Binary
                            inferredType: bool
                            left:
                              class: Expr.Variable
                              inferredType: int
                              name: x

                            operator: "=="
                            right:
                              class: Expr.Literal
                              inferredType: int
                              value: 2






              - statement:
                  class: Stmt.Expression
                  expr:
                    class: Expr.Call
                    inferredType: object
                    callee:
                      class: Expr.Variable
                      inferredType: [int] -> object
                      name: qux

                    arguments:
                      - argument:
                          class: Expr.Literal
                          inferredType: int
                          value: 0



              - statement:
                  class: Stmt.Expression
                  expr:
                    class: Expr.Assign
                    target:
                      class: Expr.Variable
                      inferredType: int
                      name: count

                    value:
                      class: Expr.Binary
                      inferredType: int
                      left:
                        class: Expr.Variable
                        inferredType: int
                        name: count

                      operator: "+"
                      right:
                        class: Expr.Literal
                        inferredType: int
                        value: 1




              - statement:
                  class: Stmt.While
                  condition:
                    class: Expr.Binary
                    inferredType: bool
                    left:
                      class: Expr.Variable
                      inferredType: int
                      name: x

                    operator: "<="
                    right:
                      class: Expr.Literal
                      inferredType: int
                      value: 0


                  body:
                    - statement:
                        class: Stmt.If
                        condition:
                          class: Expr.Get
                          inferredType: bool
                          object:
                            name: self
                            inferredType: bar

                          name: p

                        thenBranch:
                          - statement:
                              class: Stmt.Expression
                              expr:
                                class: Expr.ListSet
                                inferredType: [int]
                                list:
                                  class: Expr.Variable
                                  inferredType: [int]
                                  name: xx

                                index:
                                  class: Expr.Literal
                                  inferredType: int
                                  value: 0

                                value:
                                  class: Expr.Index
                                  inferredType: int
                                  list:
                                    class: Expr.Variable
                                    inferredType: [int]
                                    name: xx

                                  index:
                                    class: Expr.Literal
                                    inferredType: int
                                    value: 1




                          - statement:
                              class: Stmt.Expression
                              expr:
                                class: Expr.Set
                                object:
                                  name: self
                                  inferredType: bar

                                name: p
                                value:
                                  class: Expr.Unary
                                  inferredType: bool
                                  operator: "not"
                                  operand:
                                    class: Expr.Get
                                    inferredType: bool
                                    object:
                                      name: self
                                      inferredType: bar

                                    name: p




                          - statement:
                              class: Stmt.Expression
                              expr:
                                class: Expr.Assign
                                target:
                                  class: Expr.Variable
                                  inferredType: int
                                  name: x

                                value:
                                  class: Expr.Binary
                                  inferredType: int
                                  left:
                                    class: Expr.Variable
                                    inferredType: int
                                    name: x

                                  operator: "+"
                                  right:
                                    class: Expr.Literal
                                    inferredType: int
                                    value: 1





                        elseBranch:
                          - statement:
                              class: Stmt.If
                              condition:
                                class: Expr.Binary
                                inferredType: bool
                                left:
                                  class: Expr.Call
                                  inferredType: int
                                  callee:
                                    class: Expr.Variable
                                    inferredType: [str] -> int
                                    name: foo

                                  arguments:
                                    - argument:
                                        class: Expr.Index
                                        inferredType: str
                                        list:
                                          class: Expr.Literal
                                          inferredType: str
                                          value: "Long"

                                        index:
                                          class: Expr.Literal
                                          inferredType: int
                                          value: 0



                                operator: "=="
                                right:
                                  class: Expr.Literal
                                  inferredType: int
                                  value: 1


                              thenBranch:
                                - statement:
                                    class: Stmt.Expression
                                    expr:
                                      class: Expr.Set
                                      object:
                                        name: self
                                        inferredType: bar

                                      name: p
                                      value:
                                        class: Expr.Binary
                                        inferredType: bool
                                        left:
                                          name: self
                                          inferredType: bar

                                        operator: "is"
                                        right:
                                          class: Expr.Literal
                                          inferredType: <None>
                                          value: None





                              elseBranch: []




              - statement:
                  class: Stmt.Return
                  value:
                    class: Expr.Literal
                    inferredType: str
                    value: "Nope"




  - statement:
      class: Stmt.Print
      expr:
        class: Expr.Call
        inferredType: str
        callee:
          class: Expr.Get
          inferredType: [bar, [int]] -> str
          object:
            class: Expr.Call
            inferredType: bar
            callee:
              class: Expr.Variable
              inferredType: [object] -> <None>
              name: bar

            arguments: []

          name: baz

        arguments:
          - argument:
              class: Expr.Listing
              inferredType: [int]
              elements:
                - element:
                    class: Expr.Literal
                    inferredType: int
                    value: 1

                - element:
                    class: Expr.Literal
                    inferredType: int
                    value: 2




